Web Applicarion Security Consortium Threat Classification	<WASC-TC>

Web应用程序面临的安全威胁
	
	枚举视图
		枚举视图是分析Web应用程序程序攻击手段和相应安全弱点的基础
		它从定义、类型和多种编程平台的实例这几个角度
		详细讨论了每种攻击手段和每个安全弱点
		另外，所涉及的安全弱点和攻击手段都被分配了唯一的识别编号
		以便与人们引用
		目前，这个视图里总共有49个WASC-ID号码<1~49>
		这些编号并不代表相应条目的危害程度
		仅仅是为了方便引用而分配的编号

	开发视图
		开发试图关联分析外部的攻击和程序内部的安全弱点
		将开发人员的视野转向程序自身的漏洞
		这一分析适用与开发周期的三个阶段
		即设计、实现<编程>、部署阶段
		如果在明确应用程序的需求时没有充分考虑安全方面要求
		就会在研发周期的初期引发漏洞，形成设计阶段的安全弱点
		不安全的编程规则或不当的惯例产生会造成实现阶段的安全弱点
		无论在应用程序、Web服务器或是其他外部系统的配置过程中那个部分出现差错
		最终都会导致部署阶段的安全弱点
		可见，这个试图以最佳安全实践为蓝本
		提出了将安全保障措施融入到日常的研发生命周期的具体方法

	交叉引用视图
		这个视图关联的分析了多种Web应用安全标准
		通过对该视图的引用
		审计人员和开发团队能够把当前所使用的标准中的术语<标注条款>
		与其他标准的相应内容进行对照分析
		如此以来，只需要较小的开销
		就可以让一个项目让一个项目同时符合多种不同的安全标准
		因为不同的应用程序安全标准会从不同的角度评估应用程序的安全性
		所以它们衡量同一的风险的评估指标也不尽相同
		因此，要对不同安全标准进行差异性分析
		才能够正确地计算安全风险及其严重程度
		当前WASC-TC中的攻击方法和薄弱环节
		可以映射到OWASP的Top10 Project、Mitre
		通用缺陷列表 Common Weakness Enumeration	<CWE>
		Mitre通用攻击模式列表分类
		Common Attack Pattern Enumeration and Classification	<CAPEC>

主要特性与优势
	
	WASC-TC围绕常见攻击和常规弱点这一中心
	深入讨论了Web应用程序运营系统的安全评估方法

	无论何种Web应用程序平台
	都可以使用Kali-Linuxd的工具集验证、测试WASC-TC提出的常见攻击和常规弱点

	它提出了三种不同视图，即枚举视图、开发视图和交叉引用视图
	枚举视图起到了基础数据库的作用
	它列举了Web应用中所有可能被发现的攻击方法和安全弱点
	开发视图将这些攻击方法和安全弱点进行关联分析
	整理成一系列漏洞
	并根据它们在开发过程中的出现阶段进行分类
	而开发阶段又可分为设计阶段、实现阶段和部署阶段
	WASC-TC标准的交叉引用视图用于对照、引用其他的应用程序安全标准

	WASC-TC标准已经得到了业界的广泛认可
	在许多开源和商业解决方案里，特别是漏洞评估和管控产品中
	都能看到WASC-TC的身影

	WASC-TC也可以和其他著名的应用安全标准兼容
	例如 OWASP 和 SANS-CWE































